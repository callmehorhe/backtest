package telegram

import (
	"fmt"
	"strconv"
	"strings"

	serv "github.com/callmehorhe/backtest"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

func (b *Bot) SendOrder(order serv.Order) {
	id := b.repo.Orders.CreateOrder(order)
	cafe := b.repo.GetCafeByID(order.Cafe_Id)
	text := fmt.Sprintf("–ó–∞–∫–∞–∑ ‚Ññ%d\n*%s*\n", id, cafe.Name)
	if order.Address != "" {
		text += fmt.Sprintf("üìç–ê–¥—Ä–µ—Å: %s\n", order.Address)
	} else {
		text += "üìå–ù–∞–≤—ã–Ω–æ—Å\n"
	}
	text += fmt.Sprintf("üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: %s\n", order.Phone)
	sum := 0
	for i := range order.Positions {
		text += fmt.Sprintf("%d: %s - %d —à—Ç.\n", i+1, order.Positions[i].Name, order.Positions[i].Count)
		sum += order.Positions[i].Count * order.Positions[i].Price
	}
	text += fmt.Sprintf("üí∏–ò—Ç–æ–≥–æ: %d—Ä.", sum)
	nKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", fmt.Sprintf("acceptf%d", id)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", fmt.Sprintf("sendf%d", id)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", fmt.Sprintf("cancelf%d", id)),
		),
	)
	msg := tgbotapi.NewMessage(cafe.Chat_ID, text)
	msg.ReplyMarkup = nKeyboard
	b.bot.Send(msg)
}

func (b *Bot) CallbackHandler(callback tgbotapi.CallbackQuery) {
	tmp := strings.Split(callback.Data, "f")
	id, _ := strconv.Atoi(tmp[1])
	switch tmp[0] {
	case "accept":
		b.Accept(callback.Message.Chat.ID, id)
	case "send":
		b.Send(callback.Message.Chat.ID, id)
	case "cancel":
		b.Cancel(callback.Message.Chat.ID, id)
	}
}

func (b *Bot) Accept(chat_ID int64, id int) {
	order := b.repo.Orders.GetOrderByID(id)
	if order.Status_accepted {
		b.SendMessage(chat_ID, fmt.Sprintf("üõë–ó–∞–∫–∞–∑ ‚Ññ%d –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Ä–∞–Ω–µ–µ!", id))
		return
	} else if order.Status_canceled {
		b.SendMessage(chat_ID, fmt.Sprintf("üõë–ó–∞–∫–∞–∑ ‚Ññ%d –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω!", id))
		return
	}
	order.Status_accepted = true
	b.repo.Orders.UpdateOrder(order)
	b.SendMessage(chat_ID, fmt.Sprintf("‚úîÔ∏è–ó–∞–∫–∞–∑ ‚Ññ%d –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", id))
}

func (b *Bot) Send(chat_ID int64, id int) {
	order := b.repo.Orders.GetOrderByID(id)
	if !order.Status_accepted {
		b.SendMessage(chat_ID, fmt.Sprintf("üõë–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ ‚Ññ%d!", id))
		return
	} else if order.Status_canceled {
		b.SendMessage(chat_ID, fmt.Sprintf("üõë–ó–∞–∫–∞–∑ ‚Ññ%d –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω!", id))
		return
	}
	order.Status_sent = true
	b.repo.Orders.UpdateOrder(order)
	b.SendMessage(chat_ID, fmt.Sprintf("‚úÖ–ó–∞–∫–∞–∑ ‚Ññ%d –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", id))
}

func (b *Bot) Cancel(chat_ID int64, id int) {
	order := b.repo.Orders.GetOrderByID(id)
	if order.Status_accepted {
		b.SendMessage(chat_ID, fmt.Sprintf("üõë–ó–∞–∫–∞–∑ ‚Ññ%d —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑!", id))
		return
	} else if order.Status_canceled {
		b.SendMessage(chat_ID, fmt.Sprintf("üõë–ó–∞–∫–∞–∑ ‚Ññ%d –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω —Ä–∞–Ω–µ–µ!", id))
		return
	}
	order.Status_canceled = true
	b.repo.Orders.UpdateOrder(order)
	b.SendMessage(chat_ID, fmt.Sprintf("‚ùå–ó–∞–∫–∞–∑ ‚Ññ%d –æ—Ç–º–µ–Ω–µ–Ω!", id))
}
