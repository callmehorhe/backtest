package telegram

import (
	"fmt"

	"github.com/callmehorhe/backtest/pkg/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/sirupsen/logrus"
)

func (b *Bot) SendOrder(order models.Order) (models.Order, error) {
	if order.Phone == "" {
		user, _ := b.repo.GetUserById(order.User_ID)
		order.Phone = user.Phone
	}

	id := b.repo.Orders.CreateOrder(order)
	cafe := b.repo.GetCafeByID(order.Cafe_Id)
	order.Cafe_Name = cafe.Name
	//–°–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞
	text := fmt.Sprintf("–ó–∞–∫–∞–∑ ‚Ññ%d\n%s\n", id, cafe.Name)
	if order.Address != "" {
		text += fmt.Sprintf("üìç–ê–¥—Ä–µ—Å: %s\n", order.Address)
		order.Cost += 100 //—Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
	} else {
		text += "üìå–ù–∞–≤—ã–Ω–æ—Å\n"
		order.Address = "–ù–∞–≤—ã–Ω–æ—Å"
	}
	text += fmt.Sprintf("üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: %s\n", order.Phone)
	order.Cost = 20
	for i := range order.Positions {
		text += fmt.Sprintf("%d: %s - %d —à—Ç.\n", i+1, order.Positions[i].Name, order.Positions[i].Count)
		order.Cost += order.Positions[i].Count * order.Positions[i].Price
	}
	if order.Address != "–ù–∞–≤—ã–Ω–æ—Å" {
		text += "–î–æ—Å—Ç–∞–≤–∫–∞: 100—Ä\n"
		order.Cost += 100
	}
	text += "–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä: 20—Ä\n"
	text += fmt.Sprintf("üí∏–ò—Ç–æ–≥–æ: %d—Ä.", order.Cost)
	nKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", fmt.Sprintf("%sf%d", models.Accepted, id)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", fmt.Sprintf("%sf%d", models.Sent, id)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", fmt.Sprintf("%sf%d", models.Canceled, id)),
		),
	)
	for _, casher := range cafe.Chat_ID {
		msg := tgbotapi.NewMessage(casher, text)
		msg.ReplyMarkup = nKeyboard
		_, err := b.cafeBot.bot.Send(msg)
		if err != nil {
			logrus.Errorf("cant send message to tgDeliveryBot, %v", err)
			return models.Order{}, err
		}
	
	}
	order.Order_ID = id
	return b.repo.UpdateOrder(order), nil
}

func (b *Bot) NewOrderForDrivers(order models.Order) {
	//–°–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞
	text := fmt.Sprintf("–ó–∞–∫–∞–∑ ‚Ññ%d\n%s\n", order.Order_ID, order.Cafe_Name)
	text += fmt.Sprintf("–ê–¥—Ä–µ—Å: %s\n", order.Address)
	text += fmt.Sprintf("–°—É–º–º–∞: %d—Ä.", order.Cost)
	nKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", fmt.Sprintf("acceptf%d", order.Order_ID)),
		),
	)
	msg := tgbotapi.NewMessage(-626247381, text)
	msg.ReplyMarkup = nKeyboard
	_, err := b.driverBot.bot.Send(msg)
	if err != nil {
		logrus.Errorf("message cant be sent: %v", err)
		return
	}
}
