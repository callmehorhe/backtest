package telegramdrivers

import (
	"encoding/json"
	"fmt"
	"strconv"
	"strings"

	"github.com/callmehorhe/backtest/pkg/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/sirupsen/logrus"
)

func (b *BotDrivers) NewOrder(order models.Order) {
	//–°–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞
	text := fmt.Sprintf("–ó–∞–∫–∞–∑ ‚Ññ%d\n%s\n", order.Order_ID, order.Cafe_Name)
	text += fmt.Sprintf("–ê–¥—Ä–µ—Å: %s\n", order.Address)
	text += fmt.Sprintf("–°—É–º–º–∞: %d—Ä.", order.Cost)
	nKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", fmt.Sprintf("acceptf%d", order.Order_ID)),
		),
	)
	msg := tgbotapi.NewMessage(-626247381, text)
	msg.ReplyMarkup = nKeyboard
	_, err := b.bot.Send(msg)
	if err != nil {
		logrus.Errorf("message cant be sent: %v", err)
		return
	}
}

func (b *BotDrivers) CallbackHandler(callback tgbotapi.CallbackQuery) {
	tmp := strings.Split(callback.Data, "f")

	id, _ := strconv.Atoi(tmp[1])
	switch tmp[0] {
	case "accept":
		b.Accept(callback, id)
	}
}

func (b *BotDrivers) Accept(callback tgbotapi.CallbackQuery, order_ID int) {
	order := b.repo.Orders.GetOrderByID(order_ID)
	if order.Driver != 0 {
		b.SendMessage(callback.Message.Chat.ID, fmt.Sprintf("üõë–ó–∞–∫–∞–∑ ‚Ññ%d —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", order_ID))
		return
	}
	order.Driver = int64(callback.From.ID)
	b.repo.Orders.UpdateOrder(order)
	b.SendMessage(-626247381, fmt.Sprintf("‚úîÔ∏è–ó–∞–∫–∞–∑ ‚Ññ%d –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤–æ–¥–∏—Ç–µ–ª–µ–º %s %s!", order_ID, callback.From.FirstName, callback.From.LastName))
	b.SendFullOrder(order, callback.From.ID)
	cafechat := b.repo.CafeList.GetCafeChatId(order.Cafe_Id)
	b.SendDriverInfo(int64(callback.From.ID), cafechat, order_ID)
}

func (b *BotDrivers) SendFullOrder(order models.Order, driver_ID int) error {
	text := fmt.Sprintf("–ó–∞–∫–∞–∑ ‚Ññ%d\n%s\n", order.Order_ID, order.Cafe_Name)
	text += fmt.Sprintf("–ê–¥—Ä–µ—Å: %s\n", order.Address)
	text += fmt.Sprintf("üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: %s\n", order.Phone)
	order_list := make([]models.Position, 10)
	err := json.Unmarshal(order.Order_list, &order_list)
	if err != nil {
		logrus.Error("Cant unmarshal order_List: %v", err)
	}
	for i, pos := range order_list {
		text += fmt.Sprintf("%d: %s - %d —à—Ç.\n", i+1, pos.Name, pos.Count)
	}
	text += "–î–æ—Å—Ç–∞–≤–∫–∞: 100—Ä\n"
	text += "–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä: 20—Ä\n"
	text += fmt.Sprintf("üí∏–ò—Ç–æ–≥–æ: %d—Ä.", order.Cost)
	msg := tgbotapi.NewMessage(int64(driver_ID), text)
	_, err = b.bot.Send(msg)
	if err != nil {
		logrus.Errorf("cant send message to tgDeliveryBot, %v", err)
		return err
	}

	return nil
}

func (b *BotDrivers) SendDriverInfo(driverId, cafeId int64, orderId int) {
	driver, err := b.repo.Drivers.GetDriverById(driverId)
	if err != nil {
		logrus.Error("cant get driver: %v", err)
	}
	msg := fmt.Sprintf(`
		–ó–∞–∫–∞–∑ %d –ø—Ä–∏–Ω—è—Ç! –î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è:
		–ò–º—è: %s
		–ú–∞—à–∏–Ω–∞: %s
		–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: %s
	`, orderId, driver.Name, driver.Car, driver.Phone)
	b.cafeBot.Send(tgbotapi.NewMessage(cafeId, msg))
}
